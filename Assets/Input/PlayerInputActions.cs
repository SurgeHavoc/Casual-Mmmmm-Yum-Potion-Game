//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.8.2
//     from Assets/Input/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;
using UnityEngine;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""DancingSeedPlayer"",
            ""id"": ""eaab540d-765f-49b9-ad95-7dde01280aed"",
            ""actions"": [
                {
                    ""name"": ""MoveUp"",
                    ""type"": ""Button"",
                    ""id"": ""3421bfa8-4f72-4b7c-82ac-93ce4ce0204b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveDown"",
                    ""type"": ""Button"",
                    ""id"": ""42ad4ddf-6a92-46f7-bcb7-1792dbd4149d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveLeft"",
                    ""type"": ""Button"",
                    ""id"": ""c578ebd5-818d-43cb-bb6c-2c1d899070c0"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveRight"",
                    ""type"": ""Button"",
                    ""id"": ""bfeaeff2-7a35-4db3-9c29-2a761991188e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""99200022-8f5b-475d-bc7b-febf53b66bff"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6d46eff0-1d17-41c2-9db2-2de52e895e6d"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""87b7ca9b-6c22-4e35-8679-d40edfe6da09"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""beebfb31-54a3-4e7e-8ab9-7e0468186492"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PickTheIngredientsPlayer"",
            ""id"": ""166762b3-cad6-4fd5-aa79-13f77cbf30b0"",
            ""actions"": [
                {
                    ""name"": ""Grab"",
                    ""type"": ""Button"",
                    ""id"": ""53ea496c-270b-4d22-bcbf-64d81684a054"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b383e98c-3443-4fa0-b0c3-49198eb00a44"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // DancingSeedPlayer
        m_DancingSeedPlayer = asset.FindActionMap("DancingSeedPlayer", throwIfNotFound: true);
        m_DancingSeedPlayer_MoveUp = m_DancingSeedPlayer.FindAction("MoveUp", throwIfNotFound: true);
        m_DancingSeedPlayer_MoveDown = m_DancingSeedPlayer.FindAction("MoveDown", throwIfNotFound: true);
        m_DancingSeedPlayer_MoveLeft = m_DancingSeedPlayer.FindAction("MoveLeft", throwIfNotFound: true);
        m_DancingSeedPlayer_MoveRight = m_DancingSeedPlayer.FindAction("MoveRight", throwIfNotFound: true);
        // PickTheIngredientsPlayer
        m_PickTheIngredientsPlayer = asset.FindActionMap("PickTheIngredientsPlayer", throwIfNotFound: true);
        m_PickTheIngredientsPlayer_Grab = m_PickTheIngredientsPlayer.FindAction("Grab", throwIfNotFound: true);
    }

    ~@PlayerInputActions()
    {
        Debug.Assert(!m_DancingSeedPlayer.enabled, "This will cause a leak and performance issues, PlayerInputActions.DancingSeedPlayer.Disable() has not been called.");
        Debug.Assert(!m_PickTheIngredientsPlayer.enabled, "This will cause a leak and performance issues, PlayerInputActions.PickTheIngredientsPlayer.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // DancingSeedPlayer
    private readonly InputActionMap m_DancingSeedPlayer;
    private List<IDancingSeedPlayerActions> m_DancingSeedPlayerActionsCallbackInterfaces = new List<IDancingSeedPlayerActions>();
    private readonly InputAction m_DancingSeedPlayer_MoveUp;
    private readonly InputAction m_DancingSeedPlayer_MoveDown;
    private readonly InputAction m_DancingSeedPlayer_MoveLeft;
    private readonly InputAction m_DancingSeedPlayer_MoveRight;
    public struct DancingSeedPlayerActions
    {
        private @PlayerInputActions m_Wrapper;
        public DancingSeedPlayerActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveUp => m_Wrapper.m_DancingSeedPlayer_MoveUp;
        public InputAction @MoveDown => m_Wrapper.m_DancingSeedPlayer_MoveDown;
        public InputAction @MoveLeft => m_Wrapper.m_DancingSeedPlayer_MoveLeft;
        public InputAction @MoveRight => m_Wrapper.m_DancingSeedPlayer_MoveRight;
        public InputActionMap Get() { return m_Wrapper.m_DancingSeedPlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DancingSeedPlayerActions set) { return set.Get(); }
        public void AddCallbacks(IDancingSeedPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_DancingSeedPlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DancingSeedPlayerActionsCallbackInterfaces.Add(instance);
            @MoveUp.started += instance.OnMoveUp;
            @MoveUp.performed += instance.OnMoveUp;
            @MoveUp.canceled += instance.OnMoveUp;
            @MoveDown.started += instance.OnMoveDown;
            @MoveDown.performed += instance.OnMoveDown;
            @MoveDown.canceled += instance.OnMoveDown;
            @MoveLeft.started += instance.OnMoveLeft;
            @MoveLeft.performed += instance.OnMoveLeft;
            @MoveLeft.canceled += instance.OnMoveLeft;
            @MoveRight.started += instance.OnMoveRight;
            @MoveRight.performed += instance.OnMoveRight;
            @MoveRight.canceled += instance.OnMoveRight;
        }

        private void UnregisterCallbacks(IDancingSeedPlayerActions instance)
        {
            @MoveUp.started -= instance.OnMoveUp;
            @MoveUp.performed -= instance.OnMoveUp;
            @MoveUp.canceled -= instance.OnMoveUp;
            @MoveDown.started -= instance.OnMoveDown;
            @MoveDown.performed -= instance.OnMoveDown;
            @MoveDown.canceled -= instance.OnMoveDown;
            @MoveLeft.started -= instance.OnMoveLeft;
            @MoveLeft.performed -= instance.OnMoveLeft;
            @MoveLeft.canceled -= instance.OnMoveLeft;
            @MoveRight.started -= instance.OnMoveRight;
            @MoveRight.performed -= instance.OnMoveRight;
            @MoveRight.canceled -= instance.OnMoveRight;
        }

        public void RemoveCallbacks(IDancingSeedPlayerActions instance)
        {
            if (m_Wrapper.m_DancingSeedPlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDancingSeedPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_DancingSeedPlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DancingSeedPlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DancingSeedPlayerActions @DancingSeedPlayer => new DancingSeedPlayerActions(this);

    // PickTheIngredientsPlayer
    private readonly InputActionMap m_PickTheIngredientsPlayer;
    private List<IPickTheIngredientsPlayerActions> m_PickTheIngredientsPlayerActionsCallbackInterfaces = new List<IPickTheIngredientsPlayerActions>();
    private readonly InputAction m_PickTheIngredientsPlayer_Grab;
    public struct PickTheIngredientsPlayerActions
    {
        private @PlayerInputActions m_Wrapper;
        public PickTheIngredientsPlayerActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Grab => m_Wrapper.m_PickTheIngredientsPlayer_Grab;
        public InputActionMap Get() { return m_Wrapper.m_PickTheIngredientsPlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PickTheIngredientsPlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPickTheIngredientsPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PickTheIngredientsPlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PickTheIngredientsPlayerActionsCallbackInterfaces.Add(instance);
            @Grab.started += instance.OnGrab;
            @Grab.performed += instance.OnGrab;
            @Grab.canceled += instance.OnGrab;
        }

        private void UnregisterCallbacks(IPickTheIngredientsPlayerActions instance)
        {
            @Grab.started -= instance.OnGrab;
            @Grab.performed -= instance.OnGrab;
            @Grab.canceled -= instance.OnGrab;
        }

        public void RemoveCallbacks(IPickTheIngredientsPlayerActions instance)
        {
            if (m_Wrapper.m_PickTheIngredientsPlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPickTheIngredientsPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PickTheIngredientsPlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PickTheIngredientsPlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PickTheIngredientsPlayerActions @PickTheIngredientsPlayer => new PickTheIngredientsPlayerActions(this);
    public interface IDancingSeedPlayerActions
    {
        void OnMoveUp(InputAction.CallbackContext context);
        void OnMoveDown(InputAction.CallbackContext context);
        void OnMoveLeft(InputAction.CallbackContext context);
        void OnMoveRight(InputAction.CallbackContext context);
    }
    public interface IPickTheIngredientsPlayerActions
    {
        void OnGrab(InputAction.CallbackContext context);
    }
}
