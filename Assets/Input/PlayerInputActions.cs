//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.8.2
//     from Assets/Input/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;
using UnityEngine;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""DancingSeedPlayer"",
            ""id"": ""eaab540d-765f-49b9-ad95-7dde01280aed"",
            ""actions"": [
                {
                    ""name"": ""MoveUp"",
                    ""type"": ""Button"",
                    ""id"": ""3421bfa8-4f72-4b7c-82ac-93ce4ce0204b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveDown"",
                    ""type"": ""Button"",
                    ""id"": ""42ad4ddf-6a92-46f7-bcb7-1792dbd4149d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveLeft"",
                    ""type"": ""Button"",
                    ""id"": ""c578ebd5-818d-43cb-bb6c-2c1d899070c0"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveRight"",
                    ""type"": ""Button"",
                    ""id"": ""bfeaeff2-7a35-4db3-9c29-2a761991188e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""99200022-8f5b-475d-bc7b-febf53b66bff"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""deb49d82-3318-456f-92d0-cd7710935bcc"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6d46eff0-1d17-41c2-9db2-2de52e895e6d"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""50eaf043-5402-4bb3-b7f6-4503aaedd91d"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""87b7ca9b-6c22-4e35-8679-d40edfe6da09"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""451907cf-d299-47e0-8a86-a1384a969132"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""beebfb31-54a3-4e7e-8ab9-7e0468186492"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""77e1d3b6-4462-40f5-bf9c-2d6fff10e89f"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PickTheIngredientsPlayer"",
            ""id"": ""166762b3-cad6-4fd5-aa79-13f77cbf30b0"",
            ""actions"": [
                {
                    ""name"": ""Grab"",
                    ""type"": ""Button"",
                    ""id"": ""53ea496c-270b-4d22-bcbf-64d81684a054"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b383e98c-3443-4fa0-b0c3-49198eb00a44"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""79192b62-0235-42ef-a347-22be9b10b774"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""HeatThePotionPlayer"",
            ""id"": ""f1b68cd4-3435-4f9d-8f35-a5764bba4142"",
            ""actions"": [
                {
                    ""name"": ""RotateLeft"",
                    ""type"": ""Button"",
                    ""id"": ""42a73b7d-d58a-4a95-9321-3c8fea8e715d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateRight"",
                    ""type"": ""Button"",
                    ""id"": ""7fe75bb1-ff58-4acf-9e11-6d0a5a1d3545"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""618e0193-64d3-4248-9d49-5b29807e8caa"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a4a362e1-b291-40f9-a76d-974ebe4df4e4"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""64217443-f3ce-432a-813b-5fababe333c7"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7fc183dd-a5c2-4414-8854-6937a0e68baf"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""RubThePotionPlayer"",
            ""id"": ""082a75ed-82f8-4a8a-b2ae-e1792fb5c759"",
            ""actions"": [
                {
                    ""name"": ""RubLeft"",
                    ""type"": ""Button"",
                    ""id"": ""c6685348-2506-4595-9d64-86b606d936fa"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RubRight"",
                    ""type"": ""Button"",
                    ""id"": ""ff801d03-0efd-4fb5-a24d-290241f7dd7c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""178d49c7-0d93-4912-bbbc-a3ce0b8c6403"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RubLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d7167ec3-f88c-40c6-a8b6-a3f90b787972"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RubLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ae04f9f7-dbe6-4e17-84ac-1686901e1261"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RubRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8d991b90-a90c-42e5-8594-6804a3ba4e86"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RubRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MortarAndPestlePlayer"",
            ""id"": ""33f73f09-d77b-4e56-8977-c8535c051637"",
            ""actions"": [
                {
                    ""name"": ""MoveCursor"",
                    ""type"": ""Value"",
                    ""id"": ""89ccfdfe-c744-4147-9de1-d0ad940ab702"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseClick"",
                    ""type"": ""Button"",
                    ""id"": ""1e48fe24-f4ba-47d2-8669-53c1a2d4076d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e0a0f6f6-78fe-45b6-a6ad-e67ad769a165"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveCursor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3b647404-0cf0-4f8f-bf53-ee36ba93327d"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // DancingSeedPlayer
        m_DancingSeedPlayer = asset.FindActionMap("DancingSeedPlayer", throwIfNotFound: true);
        m_DancingSeedPlayer_MoveUp = m_DancingSeedPlayer.FindAction("MoveUp", throwIfNotFound: true);
        m_DancingSeedPlayer_MoveDown = m_DancingSeedPlayer.FindAction("MoveDown", throwIfNotFound: true);
        m_DancingSeedPlayer_MoveLeft = m_DancingSeedPlayer.FindAction("MoveLeft", throwIfNotFound: true);
        m_DancingSeedPlayer_MoveRight = m_DancingSeedPlayer.FindAction("MoveRight", throwIfNotFound: true);
        // PickTheIngredientsPlayer
        m_PickTheIngredientsPlayer = asset.FindActionMap("PickTheIngredientsPlayer", throwIfNotFound: true);
        m_PickTheIngredientsPlayer_Grab = m_PickTheIngredientsPlayer.FindAction("Grab", throwIfNotFound: true);
        // HeatThePotionPlayer
        m_HeatThePotionPlayer = asset.FindActionMap("HeatThePotionPlayer", throwIfNotFound: true);
        m_HeatThePotionPlayer_RotateLeft = m_HeatThePotionPlayer.FindAction("RotateLeft", throwIfNotFound: true);
        m_HeatThePotionPlayer_RotateRight = m_HeatThePotionPlayer.FindAction("RotateRight", throwIfNotFound: true);
        // RubThePotionPlayer
        m_RubThePotionPlayer = asset.FindActionMap("RubThePotionPlayer", throwIfNotFound: true);
        m_RubThePotionPlayer_RubLeft = m_RubThePotionPlayer.FindAction("RubLeft", throwIfNotFound: true);
        m_RubThePotionPlayer_RubRight = m_RubThePotionPlayer.FindAction("RubRight", throwIfNotFound: true);
        // MortarAndPestlePlayer
        m_MortarAndPestlePlayer = asset.FindActionMap("MortarAndPestlePlayer", throwIfNotFound: true);
        m_MortarAndPestlePlayer_MoveCursor = m_MortarAndPestlePlayer.FindAction("MoveCursor", throwIfNotFound: true);
        m_MortarAndPestlePlayer_MouseClick = m_MortarAndPestlePlayer.FindAction("MouseClick", throwIfNotFound: true);
    }

    ~@PlayerInputActions()
    {
        Debug.Assert(!m_DancingSeedPlayer.enabled, "This will cause a leak and performance issues, PlayerInputActions.DancingSeedPlayer.Disable() has not been called.");
        Debug.Assert(!m_PickTheIngredientsPlayer.enabled, "This will cause a leak and performance issues, PlayerInputActions.PickTheIngredientsPlayer.Disable() has not been called.");
        Debug.Assert(!m_HeatThePotionPlayer.enabled, "This will cause a leak and performance issues, PlayerInputActions.HeatThePotionPlayer.Disable() has not been called.");
        Debug.Assert(!m_RubThePotionPlayer.enabled, "This will cause a leak and performance issues, PlayerInputActions.RubThePotionPlayer.Disable() has not been called.");
        Debug.Assert(!m_MortarAndPestlePlayer.enabled, "This will cause a leak and performance issues, PlayerInputActions.MortarAndPestlePlayer.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // DancingSeedPlayer
    private readonly InputActionMap m_DancingSeedPlayer;
    private List<IDancingSeedPlayerActions> m_DancingSeedPlayerActionsCallbackInterfaces = new List<IDancingSeedPlayerActions>();
    private readonly InputAction m_DancingSeedPlayer_MoveUp;
    private readonly InputAction m_DancingSeedPlayer_MoveDown;
    private readonly InputAction m_DancingSeedPlayer_MoveLeft;
    private readonly InputAction m_DancingSeedPlayer_MoveRight;
    public struct DancingSeedPlayerActions
    {
        private @PlayerInputActions m_Wrapper;
        public DancingSeedPlayerActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveUp => m_Wrapper.m_DancingSeedPlayer_MoveUp;
        public InputAction @MoveDown => m_Wrapper.m_DancingSeedPlayer_MoveDown;
        public InputAction @MoveLeft => m_Wrapper.m_DancingSeedPlayer_MoveLeft;
        public InputAction @MoveRight => m_Wrapper.m_DancingSeedPlayer_MoveRight;
        public InputActionMap Get() { return m_Wrapper.m_DancingSeedPlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DancingSeedPlayerActions set) { return set.Get(); }
        public void AddCallbacks(IDancingSeedPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_DancingSeedPlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DancingSeedPlayerActionsCallbackInterfaces.Add(instance);
            @MoveUp.started += instance.OnMoveUp;
            @MoveUp.performed += instance.OnMoveUp;
            @MoveUp.canceled += instance.OnMoveUp;
            @MoveDown.started += instance.OnMoveDown;
            @MoveDown.performed += instance.OnMoveDown;
            @MoveDown.canceled += instance.OnMoveDown;
            @MoveLeft.started += instance.OnMoveLeft;
            @MoveLeft.performed += instance.OnMoveLeft;
            @MoveLeft.canceled += instance.OnMoveLeft;
            @MoveRight.started += instance.OnMoveRight;
            @MoveRight.performed += instance.OnMoveRight;
            @MoveRight.canceled += instance.OnMoveRight;
        }

        private void UnregisterCallbacks(IDancingSeedPlayerActions instance)
        {
            @MoveUp.started -= instance.OnMoveUp;
            @MoveUp.performed -= instance.OnMoveUp;
            @MoveUp.canceled -= instance.OnMoveUp;
            @MoveDown.started -= instance.OnMoveDown;
            @MoveDown.performed -= instance.OnMoveDown;
            @MoveDown.canceled -= instance.OnMoveDown;
            @MoveLeft.started -= instance.OnMoveLeft;
            @MoveLeft.performed -= instance.OnMoveLeft;
            @MoveLeft.canceled -= instance.OnMoveLeft;
            @MoveRight.started -= instance.OnMoveRight;
            @MoveRight.performed -= instance.OnMoveRight;
            @MoveRight.canceled -= instance.OnMoveRight;
        }

        public void RemoveCallbacks(IDancingSeedPlayerActions instance)
        {
            if (m_Wrapper.m_DancingSeedPlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDancingSeedPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_DancingSeedPlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DancingSeedPlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DancingSeedPlayerActions @DancingSeedPlayer => new DancingSeedPlayerActions(this);

    // PickTheIngredientsPlayer
    private readonly InputActionMap m_PickTheIngredientsPlayer;
    private List<IPickTheIngredientsPlayerActions> m_PickTheIngredientsPlayerActionsCallbackInterfaces = new List<IPickTheIngredientsPlayerActions>();
    private readonly InputAction m_PickTheIngredientsPlayer_Grab;
    public struct PickTheIngredientsPlayerActions
    {
        private @PlayerInputActions m_Wrapper;
        public PickTheIngredientsPlayerActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Grab => m_Wrapper.m_PickTheIngredientsPlayer_Grab;
        public InputActionMap Get() { return m_Wrapper.m_PickTheIngredientsPlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PickTheIngredientsPlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPickTheIngredientsPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PickTheIngredientsPlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PickTheIngredientsPlayerActionsCallbackInterfaces.Add(instance);
            @Grab.started += instance.OnGrab;
            @Grab.performed += instance.OnGrab;
            @Grab.canceled += instance.OnGrab;
        }

        private void UnregisterCallbacks(IPickTheIngredientsPlayerActions instance)
        {
            @Grab.started -= instance.OnGrab;
            @Grab.performed -= instance.OnGrab;
            @Grab.canceled -= instance.OnGrab;
        }

        public void RemoveCallbacks(IPickTheIngredientsPlayerActions instance)
        {
            if (m_Wrapper.m_PickTheIngredientsPlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPickTheIngredientsPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PickTheIngredientsPlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PickTheIngredientsPlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PickTheIngredientsPlayerActions @PickTheIngredientsPlayer => new PickTheIngredientsPlayerActions(this);

    // HeatThePotionPlayer
    private readonly InputActionMap m_HeatThePotionPlayer;
    private List<IHeatThePotionPlayerActions> m_HeatThePotionPlayerActionsCallbackInterfaces = new List<IHeatThePotionPlayerActions>();
    private readonly InputAction m_HeatThePotionPlayer_RotateLeft;
    private readonly InputAction m_HeatThePotionPlayer_RotateRight;
    public struct HeatThePotionPlayerActions
    {
        private @PlayerInputActions m_Wrapper;
        public HeatThePotionPlayerActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @RotateLeft => m_Wrapper.m_HeatThePotionPlayer_RotateLeft;
        public InputAction @RotateRight => m_Wrapper.m_HeatThePotionPlayer_RotateRight;
        public InputActionMap Get() { return m_Wrapper.m_HeatThePotionPlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HeatThePotionPlayerActions set) { return set.Get(); }
        public void AddCallbacks(IHeatThePotionPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_HeatThePotionPlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_HeatThePotionPlayerActionsCallbackInterfaces.Add(instance);
            @RotateLeft.started += instance.OnRotateLeft;
            @RotateLeft.performed += instance.OnRotateLeft;
            @RotateLeft.canceled += instance.OnRotateLeft;
            @RotateRight.started += instance.OnRotateRight;
            @RotateRight.performed += instance.OnRotateRight;
            @RotateRight.canceled += instance.OnRotateRight;
        }

        private void UnregisterCallbacks(IHeatThePotionPlayerActions instance)
        {
            @RotateLeft.started -= instance.OnRotateLeft;
            @RotateLeft.performed -= instance.OnRotateLeft;
            @RotateLeft.canceled -= instance.OnRotateLeft;
            @RotateRight.started -= instance.OnRotateRight;
            @RotateRight.performed -= instance.OnRotateRight;
            @RotateRight.canceled -= instance.OnRotateRight;
        }

        public void RemoveCallbacks(IHeatThePotionPlayerActions instance)
        {
            if (m_Wrapper.m_HeatThePotionPlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IHeatThePotionPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_HeatThePotionPlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_HeatThePotionPlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public HeatThePotionPlayerActions @HeatThePotionPlayer => new HeatThePotionPlayerActions(this);

    // RubThePotionPlayer
    private readonly InputActionMap m_RubThePotionPlayer;
    private List<IRubThePotionPlayerActions> m_RubThePotionPlayerActionsCallbackInterfaces = new List<IRubThePotionPlayerActions>();
    private readonly InputAction m_RubThePotionPlayer_RubLeft;
    private readonly InputAction m_RubThePotionPlayer_RubRight;
    public struct RubThePotionPlayerActions
    {
        private @PlayerInputActions m_Wrapper;
        public RubThePotionPlayerActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @RubLeft => m_Wrapper.m_RubThePotionPlayer_RubLeft;
        public InputAction @RubRight => m_Wrapper.m_RubThePotionPlayer_RubRight;
        public InputActionMap Get() { return m_Wrapper.m_RubThePotionPlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RubThePotionPlayerActions set) { return set.Get(); }
        public void AddCallbacks(IRubThePotionPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_RubThePotionPlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RubThePotionPlayerActionsCallbackInterfaces.Add(instance);
            @RubLeft.started += instance.OnRubLeft;
            @RubLeft.performed += instance.OnRubLeft;
            @RubLeft.canceled += instance.OnRubLeft;
            @RubRight.started += instance.OnRubRight;
            @RubRight.performed += instance.OnRubRight;
            @RubRight.canceled += instance.OnRubRight;
        }

        private void UnregisterCallbacks(IRubThePotionPlayerActions instance)
        {
            @RubLeft.started -= instance.OnRubLeft;
            @RubLeft.performed -= instance.OnRubLeft;
            @RubLeft.canceled -= instance.OnRubLeft;
            @RubRight.started -= instance.OnRubRight;
            @RubRight.performed -= instance.OnRubRight;
            @RubRight.canceled -= instance.OnRubRight;
        }

        public void RemoveCallbacks(IRubThePotionPlayerActions instance)
        {
            if (m_Wrapper.m_RubThePotionPlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IRubThePotionPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_RubThePotionPlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RubThePotionPlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public RubThePotionPlayerActions @RubThePotionPlayer => new RubThePotionPlayerActions(this);

    // MortarAndPestlePlayer
    private readonly InputActionMap m_MortarAndPestlePlayer;
    private List<IMortarAndPestlePlayerActions> m_MortarAndPestlePlayerActionsCallbackInterfaces = new List<IMortarAndPestlePlayerActions>();
    private readonly InputAction m_MortarAndPestlePlayer_MoveCursor;
    private readonly InputAction m_MortarAndPestlePlayer_MouseClick;
    public struct MortarAndPestlePlayerActions
    {
        private @PlayerInputActions m_Wrapper;
        public MortarAndPestlePlayerActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveCursor => m_Wrapper.m_MortarAndPestlePlayer_MoveCursor;
        public InputAction @MouseClick => m_Wrapper.m_MortarAndPestlePlayer_MouseClick;
        public InputActionMap Get() { return m_Wrapper.m_MortarAndPestlePlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MortarAndPestlePlayerActions set) { return set.Get(); }
        public void AddCallbacks(IMortarAndPestlePlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_MortarAndPestlePlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MortarAndPestlePlayerActionsCallbackInterfaces.Add(instance);
            @MoveCursor.started += instance.OnMoveCursor;
            @MoveCursor.performed += instance.OnMoveCursor;
            @MoveCursor.canceled += instance.OnMoveCursor;
            @MouseClick.started += instance.OnMouseClick;
            @MouseClick.performed += instance.OnMouseClick;
            @MouseClick.canceled += instance.OnMouseClick;
        }

        private void UnregisterCallbacks(IMortarAndPestlePlayerActions instance)
        {
            @MoveCursor.started -= instance.OnMoveCursor;
            @MoveCursor.performed -= instance.OnMoveCursor;
            @MoveCursor.canceled -= instance.OnMoveCursor;
            @MouseClick.started -= instance.OnMouseClick;
            @MouseClick.performed -= instance.OnMouseClick;
            @MouseClick.canceled -= instance.OnMouseClick;
        }

        public void RemoveCallbacks(IMortarAndPestlePlayerActions instance)
        {
            if (m_Wrapper.m_MortarAndPestlePlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMortarAndPestlePlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_MortarAndPestlePlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MortarAndPestlePlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MortarAndPestlePlayerActions @MortarAndPestlePlayer => new MortarAndPestlePlayerActions(this);
    public interface IDancingSeedPlayerActions
    {
        void OnMoveUp(InputAction.CallbackContext context);
        void OnMoveDown(InputAction.CallbackContext context);
        void OnMoveLeft(InputAction.CallbackContext context);
        void OnMoveRight(InputAction.CallbackContext context);
    }
    public interface IPickTheIngredientsPlayerActions
    {
        void OnGrab(InputAction.CallbackContext context);
    }
    public interface IHeatThePotionPlayerActions
    {
        void OnRotateLeft(InputAction.CallbackContext context);
        void OnRotateRight(InputAction.CallbackContext context);
    }
    public interface IRubThePotionPlayerActions
    {
        void OnRubLeft(InputAction.CallbackContext context);
        void OnRubRight(InputAction.CallbackContext context);
    }
    public interface IMortarAndPestlePlayerActions
    {
        void OnMoveCursor(InputAction.CallbackContext context);
        void OnMouseClick(InputAction.CallbackContext context);
    }
}
